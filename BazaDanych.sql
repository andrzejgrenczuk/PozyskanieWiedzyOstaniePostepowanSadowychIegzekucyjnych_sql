-- Generated by Oracle SQL Developer Data Modeler 4.1.3.901
--   at:        2017-05-06 21:28:06 CEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




CREATE
  TABLE sprawy.AktaSprawy
  (
    AktaSprawy_ID       INTEGER NOT NULL ,
    DataZamkniecia      DATE ,
    PodstawaZakonczenia VARCHAR2 (10 CHAR) ,
    DataUtworzenia      DATE ,
    Uwagi               VARCHAR2 (500 CHAR) ,
    WspolnaSygnatura    VARCHAR2 (10 CHAR) ,
    Dowody_ID           NUMBER NOT NULL ,
    Reprezentacja_ID    INTEGER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.AktaSprawy.WspolnaSygnatura
IS
  'Dotyczy sytuacji, gdy wiele spraw jest laczonych w wspólna' ;
ALTER TABLE sprawy.AktaSprawy ADD CONSTRAINT AktaSprawy_PK PRIMARY KEY (
AktaSprawy_ID ) ;


CREATE
  TABLE sprawy.Doreczenia
  (
    Doreczenia_ID    INTEGER NOT NULL ,
    Strona_ID        INTEGER NOT NULL ,
    Ulica            VARCHAR2 (30 CHAR) ,
    NrDom            VARCHAR2 (5 CHAR) ,
    NrLok            VARCHAR2 (5) ,
    KodPocztowy      CHAR (5 CHAR) ,
    Miejscowosc      VARCHAR2 (30 CHAR) ,
    Wojewodztwo      VARCHAR2 (20 CHAR) ,
    Korespondencyjny CHAR (1 CHAR)
  ) ;
CREATE UNIQUE INDEX sprawy.Doreczenia__IDX ON sprawy.Doreczenia
  (
    Doreczenia_ID ASC
  )
  ;
ALTER TABLE sprawy.Doreczenia ADD CONSTRAINT Doreczenia_PK PRIMARY KEY (
Doreczenia_ID ) ;


CREATE
  TABLE sprawy.Dowody
  (
    Dowody_ID        NUMBER NOT NULL ,
    Nazwa            VARCHAR2 (100 CHAR) ,
    Opis             VARCHAR2 (500 CHAR) ,
    DataDopuszczenia DATE ,
    PowodOdrzucenia  VARCHAR2 (500 CHAR) ,
    Uwagi            VARCHAR2 (500 CHAR)
  ) ;
ALTER TABLE sprawy.Dowody ADD CONSTRAINT Dowody_PK PRIMARY KEY ( Dowody_ID ) ;


CREATE
  TABLE sprawy.Egzekucja
  (
    SposobyEgzekucji_ID           INTEGER NOT NULL ,
    WniosekOWszczecieEgzekucji_ID INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.Komornik
  (
    Komornik_ID         INTEGER NOT NULL ,
    Nazwa               VARCHAR2 (100 CHAR) ,
    Miejscowosc         VARCHAR2 (30 CHAR) ,
    Ulica               VARCHAR2 (30 CHAR) ,
    NrDomu              VARCHAR2 (5 CHAR) ,
    NrLok               VARCHAR2 (5 CHAR) ,
    KodPocztowy         CHAR (5 CHAR) ,
    Wojewodztwo         VARCHAR2 (15 CHAR) ,
    IloscAsesorow       INTEGER ,
    IloscAplikantow     INTEGER ,
    DatwaUtworzenia     DATE ,
    DataZawieszenia     DATE ,
    PodstawaZawieszenia VARCHAR2 (50 CHAR) ,
    DataOdwolania       DATE ,
    DataPowolania       DATE ,
    Telefon             CHAR (9 CHAR) ,
    Email               VARCHAR2 (30 CHAR) ,
    StronaInternetowa   VARCHAR2 (50)
  ) ;
ALTER TABLE sprawy.Komornik ADD CONSTRAINT Komornik_PK PRIMARY KEY (
Komornik_ID ) ;


CREATE
  TABLE sprawy.Korespondencja
  (
    Korespondencja_ID INTEGER NOT NULL ,
    AktaSprawy_ID     INTEGER NOT NULL ,
    NrPisma           VARCHAR2 (10 CHAR) ,
    DataWyslania      DATE ,
    DataOdebrania     DATE ,
    PlikSkanu XMLTYPE ,
    TrescPisma LONG ,
    Repozytorium_ID INTEGER NOT NULL
  )
  XMLTYPE COLUMN PlikSkanu STORE AS BINARY XML
  (
    STORAGE ( PCTINCREASE 0 MINEXTENTS 1 MAXEXTENTS UNLIMITED FREELISTS 1
    BUFFER_POOL DEFAULT ) RETENTION ENABLE STORAGE IN ROW NOCACHE
  ) ;
ALTER TABLE sprawy.Korespondencja ADD CONSTRAINT Korespondencja_PK PRIMARY KEY
( Korespondencja_ID ) ;


CREATE
  TABLE sprawy.NazwaZajecia
  (
    NazwaZajecia_ID INTEGER NOT NULL ,
    Nazwa           VARCHAR2 (200 CHAR)
  ) ;
ALTER TABLE sprawy.NazwaZajecia ADD CONSTRAINT NazwaZajecia_PK PRIMARY KEY (
NazwaZajecia_ID ) ;


CREATE
  TABLE sprawy.Orzeczenie
  (
    Orzeczenie_ID       INTEGER NOT NULL ,
    DataOrzeczenia      DATE ,
    DataWydania         DATE ,
    SkladSedziowski     VARCHAR2 (200 CHAR) ,
    Protokolant         VARCHAR2 (50 CHAR) ,
    Prokurator          VARCHAR2 (50 CHAR) ,
    Rozstrzygniecie     VARCHAR2 (500 CHAR) ,
    Prawomocnosc        CHAR (1 CHAR) ,
    Komentarz           VARCHAR2 (500 CHAR) ,
    RodzajOrzeczenia_ID INTEGER NOT NULL ,
    Sad_ID              INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.Orzeczenie ADD CONSTRAINT Orzeczenie_PK PRIMARY KEY (
Orzeczenie_ID ) ;


CREATE
  TABLE sprawy.Pelnomocnik
  (
    Pelnomocnik_ID    INTEGER NOT NULL ,
    Nazwa             VARCHAR2 (100 CHAR) ,
    Zawod             VARCHAR2 (15 CHAR) ,
    Ulica             VARCHAR2 (30 CHAR) ,
    NrDomu            VARCHAR2 (5 CHAR) ,
    NrLok             VARCHAR2 (5 CHAR) ,
    KodPocztowy       CHAR (5 CHAR) ,
    Miejscowosc       VARCHAR2 (30 CHAR) ,
    Wojewodztwo       VARCHAR2 (15 CHAR) ,
    Telefon           CHAR (9 CHAR) ,
    email             VARCHAR2 (30 CHAR) ,
    StronaInternetowa VARCHAR2 (50 CHAR)
  ) ;
CREATE UNIQUE INDEX sprawy.Pelnomocnik__IDX ON sprawy.Pelnomocnik
  (
    Pelnomocnik_ID ASC
  )
  ;
ALTER TABLE sprawy.Pelnomocnik ADD CONSTRAINT Pelnomocnik_PK PRIMARY KEY (
Pelnomocnik_ID ) ;


CREATE
  TABLE sprawy.PlanPodzialu
  (
    PlanPodzialu_ID INTEGER NOT NULL ,
    Kwota FLOAT (10) ,
    ZrodloKwoty VARCHAR2 (100 CHAR) ,
    Uwagi       VARCHAR2 (500 CHAR)
  ) ;
ALTER TABLE sprawy.PlanPodzialu ADD CONSTRAINT PlanPodzialu_PK PRIMARY KEY (
PlanPodzialu_ID ) ;


CREATE
  TABLE sprawy.PodzialAkta
  (
    PlanPodzialu_PlanPodzialu_ID INTEGER NOT NULL ,
    AktaSprawy_AktaSprawy_ID     INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.RachunekBankowy
  (
    RachunekBankowy_ID INTEGER NOT NULL ,
    NazwaBanku         VARCHAR2 (100 CHAR) ,
    Miejscowosc        VARCHAR2 (30 CHAR) ,
    NrRachBank         CHAR (26 CHAR) ,
    Komentarz          VARCHAR2 (50 CHAR)
  ) ;
ALTER TABLE sprawy.RachunekBankowy ADD CONSTRAINT RachunekBankowy_PK PRIMARY
KEY ( RachunekBankowy_ID ) ;


CREATE
  TABLE sprawy.Repozytorium
  (
    Sygnatura       CHAR (10 CHAR) ,
    Definicja       VARCHAR2 (30 CHAR) ,
    Repozytorium_ID INTEGER NOT NULL
  ) ;
CREATE UNIQUE INDEX sprawy.Repozytorium__IDX ON sprawy.Repozytorium
  (
    Sygnatura ASC
  )
  ;
ALTER TABLE sprawy.Repozytorium ADD CONSTRAINT Repozytorium_PK PRIMARY KEY (
Repozytorium_ID ) ;


CREATE
  TABLE sprawy.Reprezentacja
  (
    Reprezentacja_ID INTEGER NOT NULL ,
    DataUdzielenia   DATE ,
    DataOdwolania    DATE ,
    Zakres           VARCHAR2 (100 CHAR) ,
    DataDoania       DATE ,
    Uwagi            VARCHAR2 (500 CHAR) ,
    Strona_ID        INTEGER NOT NULL ,
    Pelnomocnik_ID   INTEGER NOT NULL
  ) ;
CREATE UNIQUE INDEX sprawy.Reprezentacja__IDX ON sprawy.Reprezentacja
  (
    Reprezentacja_ID ASC
  )
  ;
ALTER TABLE sprawy.Reprezentacja ADD CONSTRAINT Reprezentacja_PK PRIMARY KEY (
Reprezentacja_ID ) ;


CREATE
  TABLE sprawy.RodzajOrzeczenia
  (
    RodzajOrzeczenia_ID INTEGER NOT NULL ,
    Nazwa               VARCHAR2 (100 CHAR)
  ) ;
CREATE UNIQUE INDEX sprawy.RodzajOrzeczenia__IDX ON sprawy.RodzajOrzeczenia
  (
    RodzajOrzeczenia_ID ASC
  )
  ;
ALTER TABLE sprawy.RodzajOrzeczenia ADD CONSTRAINT RodzajOrzeczenia_PK PRIMARY
KEY ( RodzajOrzeczenia_ID ) ;


CREATE
  TABLE sprawy.RodzajeZajecia
  (
    Skutecznosc       CHAR (1 CHAR) ,
    RodzajeZajecia_ID INTEGER NOT NULL ,
    NazwaZajecia_ID   INTEGER NOT NULL ,
    DataZajecia       DATE ,
    DataOdwolania     DATE
  ) ;
COMMENT ON COLUMN sprawy.RodzajeZajecia.Skutecznosc
IS
  '0 - nie, 1 - tak' ;
ALTER TABLE sprawy.RodzajeZajecia ADD CONSTRAINT RodzajeZajecia_PK PRIMARY KEY
( RodzajeZajecia_ID ) ;


CREATE
  TABLE sprawy.Rozprawa
  (
    Rozprawa_ID              INTEGER NOT NULL ,
    Sygnatura                VARCHAR2 (10 CHAR) ,
    DataRozprawy             DATE ,
    Sala                     VARCHAR2 (5 CHAR) ,
    Stawiennictwo            CHAR (1 CHAR) ,
    Uwagi                    VARCHAR2 (500 CHAR) ,
    Ponowienie               CHAR (1 CHAR) ,
    AktaSprawy_AktaSprawy_ID INTEGER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.Rozprawa.Stawiennictwo
IS
  '0 - nieobowiązkowe, 1 - obowiązkowe, 2- obowiązkowe dla pełnomocnika, 3 - nieobowiązkowe dla pełnomocnika'
  ;
  COMMENT ON COLUMN sprawy.Rozprawa.Ponowienie
IS
  '0 - nie, 1 - tak' ;
ALTER TABLE sprawy.Rozprawa ADD CONSTRAINT Rozprawa_PK PRIMARY KEY (
Rozprawa_ID ) ;


CREATE
  TABLE sprawy.Sad
  (
    Sad_ID            INTEGER NOT NULL ,
    Nazwa             VARCHAR2 (100 CHAR) ,
    Wydzial           VARCHAR2 (100 CHAR) ,
    Ulica             VARCHAR2 (30 CHAR) ,
    NrDomu            VARCHAR2 (5 CHAR) ,
    NrLok             VARCHAR2 (5 CHAR) ,
    Kodpocztowy       CHAR (5 CHAR) ,
    Miejscowosc       VARCHAR2 (30 CHAR) ,
    Wojewodztwo       VARCHAR2 (20 CHAR) ,
    Telefon           CHAR (9 CHAR) ,
    Email             VARCHAR2 (30 CHAR) ,
    StronaInternetowa VARCHAR2 (50 CHAR)
  ) ;
CREATE UNIQUE INDEX sprawy.Sad__IDX ON sprawy.Sad
  (
    Sad_ID ASC
  )
  ;
ALTER TABLE sprawy.Sad ADD CONSTRAINT Sad_PK PRIMARY KEY ( Sad_ID ) ;


CREATE
  TABLE sprawy.SposobyEgzekucji
  (
    SposobyEgzekucji_ID INTEGER NOT NULL ,
    EgzZRachBank        CHAR (1 CHAR) ,
    EgzZZUS             CHAR (1 CHAR) ,
    EgzZKW              CHAR (1 CHAR) ,
    EgzZCEPiK           CHAR (1 CHAR) ,
    EgzInne             CHAR (1 CHAR)
  ) ;
ALTER TABLE sprawy.SposobyEgzekucji ADD CONSTRAINT SposobyEgzekucji_PK PRIMARY
KEY ( SposobyEgzekucji_ID ) ;


CREATE
  TABLE sprawy.Sprawa
  (
    Sprawa_ID      INTEGER NOT NULL ,
    Sygnatura      VARCHAR2 (10 CHAR) ,
    PodstawaPrawna VARCHAR2 (10 CHAR) ,
    WPS FLOAT (10) ,
    Odsetkiod  DATE ,
    OdsetkiDo  DATE ,
    OdsetkiDDZ CHAR (1 CHAR) ,
    KZP FLOAT (10) ,
    KosztySadowe FLOAT (10) ,
    InneKoszty FLOAT (10) ,
    Uwagi         VARCHAR2 (500 CHAR) ,
    AktaSprawy_ID INTEGER NOT NULL ,
    Orzeczenie_ID INTEGER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.Sprawa.WPS
IS
  'Wartość przedmiotu sporu' ;
  COMMENT ON COLUMN sprawy.Sprawa.OdsetkiDDZ
IS
  'Odsetki do dnia zaplaty' ;
  COMMENT ON COLUMN sprawy.Sprawa.KZP
IS
  'Koszty zastępstwa procesowego' ;
ALTER TABLE sprawy.Sprawa ADD CONSTRAINT Sprawa_PK PRIMARY KEY ( Sprawa_ID ) ;


CREATE
  TABLE sprawy.Statusstrony
  (
    Statusstrony_ID INTEGER NOT NULL ,
    Status          VARCHAR2 (20 CHAR)
  ) ;
ALTER TABLE sprawy.Statusstrony ADD CONSTRAINT Statusstrony_PK PRIMARY KEY (
Statusstrony_ID ) ;


CREATE
  TABLE sprawy.Strona
  (
    Strona_ID       INTEGER NOT NULL ,
    Imie            VARCHAR2 (30 CHAR) ,
    Nazwisko        VARCHAR2 (30 CHAR) ,
    Nazwa           VARCHAR2 (50 CHAR) ,
    KRS             CHAR (10) ,
    NIP             CHAR (10 CHAR) ,
    PESEL           CHAR (11 CHAR) ,
    REGON           CHAR (10 CHAR) ,
    DataUrodzenia   DATE ,
    Telefon         CHAR (9 CHAR) ,
    email           VARCHAR2 (30 CHAR) ,
    Statusstrony_ID INTEGER NOT NULL
  ) ;
CREATE UNIQUE INDEX sprawy.Strona__IDX ON sprawy.Strona
  (
    Statusstrony_ID ASC , Strona_ID ASC
  )
  ;
ALTER TABLE sprawy.Strona ADD CONSTRAINT Strona_PK PRIMARY KEY ( Strona_ID ) ;


CREATE
  TABLE sprawy.WniosekOWszczecieEgzekucji
  (
    WniosekOWszczecieEgzekucji_ID INTEGER NOT NULL ,
    DataWniosku                   DATE ,
    DataWszczecia                 DATE ,
    KosztyZastepstwa FLOAT (10) ,
    SygnaturaSad   VARCHAR2 (10 CHAR) ,
    WyborKomornika CHAR (1 CHAR) ,
    AktaSprawy_ID  INTEGER NOT NULL ,
    Komornik_ID    INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.WniosekOWszczecieEgzekucji ADD CONSTRAINT
WniosekOWszczecieEgzekucji_PK PRIMARY KEY ( WniosekOWszczecieEgzekucji_ID ) ;


CREATE
  TABLE sprawy.WplataAkta
  (
    DataWplaty      DATE ,
    DataKsiegowania DATE ,
    Kwota FLOAT (10) ,
    WplataAkta_ID            NUMBER NOT NULL ,
    AktaSprawy_AktaSprawy_ID INTEGER NOT NULL ,
    Wplaty_Wplaty_ID         NUMBER NOT NULL
  ) ;
ALTER TABLE sprawy.WplataAkta ADD CONSTRAINT WplataAkta_PK PRIMARY KEY (
WplataAkta_ID ) ;


CREATE
  TABLE sprawy.Wplaty
  (
    Sygnatura   VARCHAR2 (10 CHAR) ,
    ZgodnieZKPC CHAR (1 CHAR) ,
    KosztyEgzekucji FLOAT (10) ,
    KosztyZastepstwaEgzekucji FLOAT (10) ,
    KosztySadowe FLOAT (10) ,
    KosztyZastepstwaSad FLOAT (10) ,
    WPS FLOAT (10) ,
    Odsetki FLOAT (10) ,
    InneKoszty FLOAT (10) ,
    Uwagi     VARCHAR2 (500 CHAR) ,
    Wplaty_ID NUMBER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.Wplaty.ZgodnieZKPC
IS
  '0 - tak, 1 - zdefiniowany przez wierzyciela' ;
ALTER TABLE sprawy.Wplaty ADD CONSTRAINT Wplaty_PK PRIMARY KEY ( Wplaty_ID ) ;


CREATE
  TABLE sprawy.Zajecie
  (
    Zajecia_ID     INTEGER NOT NULL ,
    DataZajecia    DATE ,
    DataOdpowiedzi DATE ,
    DataPonowienia DATE ,
    Skutecznosc    CHAR (1 CHAR) ,
    Komentarz      VARCHAR2 (100 CHAR) ,
    Uwagi          VARCHAR2 (500 CHAR) ,
    AktaSprawy_ID  INTEGER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.Zajecie.Skutecznosc
IS
  '0 - nie, 1 - tak' ;
ALTER TABLE sprawy.Zajecie ADD CONSTRAINT Zajecie_PK PRIMARY KEY ( Zajecia_ID )
;


CREATE
  TABLE sprawy.ZajecieBank
  (
    RodzajeZajecia_ID  INTEGER NOT NULL ,
    RachunekBankowy_ID INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.ZajecieCepik
  (
    ZajecieCepik_ID INTEGER NOT NULL ,
    Starostwo       VARCHAR2 (50 CHAR) ,
    Ulica           VARCHAR2 (30 CHAR) ,
    NrDom           VARCHAR2 (5 CHAR) ,
    NrLok           VARCHAR2 (5 CHAR) ,
    KodPocztowy     CHAR (5 CHAR) ,
    Miejscowosc     VARCHAR2 (30 CHAR) ,
    Wojewodztwo     VARCHAR2 (20 CHAR) ,
    Producent       VARCHAR2 (20 CHAR) ,
    Marka           VARCHAR2 (20 CHAR) ,
    Model           VARCHAR2 (20 CHAR) ,
    DataProdukcji   DATE ,
    Wlasnosc        CHAR (1 CHAR) ,
    Komentarz       VARCHAR2 (50 CHAR)
  ) ;
COMMENT ON COLUMN sprawy.ZajecieCepik.Wlasnosc
IS
  '0 - wlasnosc samoistna, 1 - wspolwlasciciel' ;
ALTER TABLE sprawy.ZajecieCepik ADD CONSTRAINT ZajecieCepik_PK PRIMARY KEY (
ZajecieCepik_ID ) ;


CREATE
  TABLE sprawy.ZajecieInne
  (
    ZajecieInne_ID INTEGER NOT NULL ,
    Nazwa          VARCHAR2 (100 CHAR) ,
    Tytul          VARCHAR2 (50 CHAR) ,
    Kwota FLOAT (10) ,
    Uwagi VARCHAR2 (500 CHAR)
  ) ;
ALTER TABLE sprawy.ZajecieInne ADD CONSTRAINT ZajecieInne_PK PRIMARY KEY (
ZajecieInne_ID ) ;


CREATE
  TABLE sprawy.ZajecieKW
  (
    ZajecieKW_ID             INTEGER NOT NULL ,
    DataZalozenia            DATE ,
    NrKW                     CHAR (13 CHAR) ,
    WpisHipoteczny           CHAR (1 CHAR) ,
    DataWpisuHip             DATE ,
    Komentarz                VARCHAR2 (500 CHAR) ,
    OgraniczonePrawaRzeczowe CHAR (1 CHAR) ,
    Komentarz_1              VARCHAR2 (500 CHAR) ,
    DataWpisuOgr             DATE ,
    Własnosc                 VARCHAR2 (200 CHAR) ,
    Sad_Sad_ID               INTEGER NOT NULL
  ) ;
COMMENT ON COLUMN sprawy.ZajecieKW.WpisHipoteczny
IS
  '0 - nie, 1 - tak' ;
CREATE UNIQUE INDEX sprawy.ZajecieKW__IDX ON sprawy.ZajecieKW
  (
    Sad_Sad_ID ASC
  )
  ;
ALTER TABLE sprawy.ZajecieKW ADD CONSTRAINT ZajecieKW_PK PRIMARY KEY (
ZajecieKW_ID ) ;


CREATE
  TABLE sprawy.ZajecieNaKW
  (
    ZajecieKW_ID      INTEGER NOT NULL ,
    RodzajeZajecia_ID INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.ZajecieNaKW ADD CONSTRAINT Relation_15_PK PRIMARY KEY (
ZajecieKW_ID ) ;


CREATE
  TABLE sprawy.ZajeciePojazdu
  (
    ZajecieCepik_ID    INTEGER NOT NULL ,
    RodzajeZajecia_ID1 INTEGER NOT NULL ,
    ZajecieCepik_ID_1  INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.ZajeciePojazdu ADD CONSTRAINT Relation_17_PK PRIMARY KEY (
ZajecieCepik_ID ) ;


CREATE
  TABLE sprawy.ZajecieUS
  (
    ZajecieUS_ID INTEGER NOT NULL ,
    Nazwa        VARCHAR2 (100 CHAR) ,
    Ulica        VARCHAR2 (30 CHAR) ,
    NrDom        VARCHAR2 (5 CHAR) ,
    NrLok        VARCHAR2 (5 CHAR) ,
    KodPocztowy  CHAR (5 CHAR) ,
    Miejscowosc  VARCHAR2 (30 CHAR) ,
    Wojewodztwo  VARCHAR2 (20 CHAR) ,
    Kwota FLOAT (10) ,
    Tytul     VARCHAR2 (50 CHAR) ,
    Komentarz VARCHAR2 (50 CHAR)
  ) ;
ALTER TABLE sprawy.ZajecieUS ADD CONSTRAINT ZajecieUS_PK PRIMARY KEY (
ZajecieUS_ID ) ;


CREATE
  TABLE sprawy.ZajecieWgRodzaju
  (
    Zajecie_Zajecia_ID INTEGER NOT NULL ,
    RodzajeZajecia_ID  INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.ZajecieWgRodzaju ADD CONSTRAINT Relation_14_PK PRIMARY KEY (
Zajecie_Zajecia_ID, RodzajeZajecia_ID ) ;


CREATE
  TABLE sprawy.ZajecieZUS
  (
    ZajecieZUS_ID  INTEGER NOT NULL ,
    Nazwa          VARCHAR2 (100 CHAR) ,
    Ulica          VARCHAR2 (30 CHAR) ,
    NrDom          VARCHAR2 (5 CHAR) ,
    NrLok          VARCHAR2 (5 CHAR) ,
    KodPocztowy    CHAR (5 CHAR) ,
    Miejscowosc    VARCHAR2 (30 CHAR) ,
    Wojewodztwo    VARCHAR2 (20 CHAR) ,
    NrSwiadczenia  VARCHAR2 (20 CHAR) ,
    DataPrzyznania DATE ,
    Kwota FLOAT (10) ,
    DataZawieszenia DATE ,
    DataZakonczenia DATE ,
    Uwagi           VARCHAR2 (500 CHAR)
  ) ;
ALTER TABLE sprawy.ZajecieZUS ADD CONSTRAINT ZajecieZUS_PK PRIMARY KEY (
ZajecieZUS_ID ) ;


CREATE
  TABLE sprawy.ZajeciewInnych
  (
    RodzajeZajecia_ID INTEGER NOT NULL ,
    ZajecieInne_ID    INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.ZajeciewUS
  (
    RodzajeZajecia_ID INTEGER NOT NULL ,
    ZajecieUS_ID      INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.ZajeciewZUS
  (
    RodzajeZajecia_ID INTEGER NOT NULL ,
    ZajecieZUS_ID     INTEGER NOT NULL
  ) ;


CREATE
  TABLE sprawy.ZbiegEgzekucji
  (
    ZbiegEgzekucji_ID        INTEGER NOT NULL ,
    SygnaturaZbiegu          VARCHAR2 (10 CHAR) ,
    DataZbiegu               DATE ,
    Komornik_Komornik_ID     INTEGER NOT NULL ,
    AktaSprawy_AktaSprawy_ID INTEGER NOT NULL
  ) ;
ALTER TABLE sprawy.ZbiegEgzekucji ADD CONSTRAINT ZbiegEgzekucji_PK PRIMARY KEY
( ZbiegEgzekucji_ID ) ;


ALTER TABLE sprawy.Korespondencja ADD CONSTRAINT AktaSprawy_FK FOREIGN KEY (
AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.WniosekOWszczecieEgzekucji ADD CONSTRAINT AktaSprawy_FKv1
FOREIGN KEY ( AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.WplataAkta ADD CONSTRAINT AktaSprawy_FKv2 FOREIGN KEY (
AktaSprawy_AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.Sprawa ADD CONSTRAINT AktaSprawy_FKv3 FOREIGN KEY (
AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.AktaSprawy ADD CONSTRAINT AktaSprawy_Reprezentacja_FK
FOREIGN KEY ( Reprezentacja_ID ) REFERENCES sprawy.Reprezentacja (
Reprezentacja_ID ) ;

ALTER TABLE sprawy.AktaSprawy ADD CONSTRAINT Dowody_FK FOREIGN KEY ( Dowody_ID
) REFERENCES sprawy.Dowody ( Dowody_ID ) ;

ALTER TABLE sprawy.ZajecieWgRodzaju ADD CONSTRAINT FK_ASS_13 FOREIGN KEY (
Zajecie_Zajecia_ID ) REFERENCES sprawy.Zajecie ( Zajecia_ID ) ;

ALTER TABLE sprawy.ZajecieWgRodzaju ADD CONSTRAINT FK_ASS_14 FOREIGN KEY (
RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajecieNaKW ADD CONSTRAINT FK_ASS_15 FOREIGN KEY (
ZajecieKW_ID ) REFERENCES sprawy.ZajecieKW ( ZajecieKW_ID ) ;

ALTER TABLE sprawy.WniosekOWszczecieEgzekucji ADD CONSTRAINT Komornik_FK
FOREIGN KEY ( Komornik_ID ) REFERENCES sprawy.Komornik ( Komornik_ID ) ;

ALTER TABLE sprawy.RodzajeZajecia ADD CONSTRAINT NazwaZajecia_FK FOREIGN KEY (
NazwaZajecia_ID ) REFERENCES sprawy.NazwaZajecia ( NazwaZajecia_ID ) ;

ALTER TABLE sprawy.Sprawa ADD CONSTRAINT Orzeczenie_FK FOREIGN KEY (
Orzeczenie_ID ) REFERENCES sprawy.Orzeczenie ( Orzeczenie_ID ) ;

ALTER TABLE sprawy.PodzialAkta ADD CONSTRAINT PodzialAkta_AktaSprawy_FK FOREIGN
KEY ( AktaSprawy_AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID )
;

ALTER TABLE sprawy.PodzialAkta ADD CONSTRAINT PodzialAkta_PlanPodzialu_FK
FOREIGN KEY ( PlanPodzialu_PlanPodzialu_ID ) REFERENCES sprawy.PlanPodzialu (
PlanPodzialu_ID ) ;

ALTER TABLE sprawy.ZajecieBank ADD CONSTRAINT RachunekBankowy_FK FOREIGN KEY (
RachunekBankowy_ID ) REFERENCES sprawy.RachunekBankowy ( RachunekBankowy_ID ) ;

ALTER TABLE sprawy.Korespondencja ADD CONSTRAINT Repozytorium_FK FOREIGN KEY (
Repozytorium_ID ) REFERENCES sprawy.Repozytorium ( Repozytorium_ID ) ;

ALTER TABLE sprawy.Reprezentacja ADD CONSTRAINT Reprezentacja_Pelnomocnik_FK
FOREIGN KEY ( Pelnomocnik_ID ) REFERENCES sprawy.Pelnomocnik ( Pelnomocnik_ID )
;

ALTER TABLE sprawy.Reprezentacja ADD CONSTRAINT Reprezentacja_Strona_FK FOREIGN
KEY ( Strona_ID ) REFERENCES sprawy.Strona ( Strona_ID ) ;

ALTER TABLE sprawy.Orzeczenie ADD CONSTRAINT RodzajOrzeczenia_FK FOREIGN KEY (
RodzajOrzeczenia_ID ) REFERENCES sprawy.RodzajOrzeczenia ( RodzajOrzeczenia_ID
) ;

ALTER TABLE sprawy.ZajeciePojazdu ADD CONSTRAINT RodzajeZajecia_FK FOREIGN KEY
( RodzajeZajecia_ID1 ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajecieNaKW ADD CONSTRAINT RodzajeZajecia_FKv1 FOREIGN KEY (
RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajeciewZUS ADD CONSTRAINT RodzajeZajecia_FKv2 FOREIGN KEY (
RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajeciewUS ADD CONSTRAINT RodzajeZajecia_FKv3 FOREIGN KEY (
RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajecieBank ADD CONSTRAINT RodzajeZajecia_FKv4 FOREIGN KEY (
RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID ) ;

ALTER TABLE sprawy.ZajeciewInnych ADD CONSTRAINT RodzajeZajecia_FKv5 FOREIGN
KEY ( RodzajeZajecia_ID ) REFERENCES sprawy.RodzajeZajecia ( RodzajeZajecia_ID
) ;

ALTER TABLE sprawy.Rozprawa ADD CONSTRAINT Rozprawa_AktaSprawy_FK FOREIGN KEY (
AktaSprawy_AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.Orzeczenie ADD CONSTRAINT Sad_FK FOREIGN KEY ( Sad_ID )
REFERENCES sprawy.Sad ( Sad_ID ) ;

ALTER TABLE sprawy.Egzekucja ADD CONSTRAINT SposobyEgzekucji_FK FOREIGN KEY (
SposobyEgzekucji_ID ) REFERENCES sprawy.SposobyEgzekucji ( SposobyEgzekucji_ID
) ;

ALTER TABLE sprawy.Strona ADD CONSTRAINT Statusstrony_FK FOREIGN KEY (
Statusstrony_ID ) REFERENCES sprawy.Statusstrony ( Statusstrony_ID ) ;

ALTER TABLE sprawy.Doreczenia ADD CONSTRAINT Strona_FK FOREIGN KEY ( Strona_ID
) REFERENCES sprawy.Strona ( Strona_ID ) ;

ALTER TABLE sprawy.Egzekucja ADD CONSTRAINT WniosekOWszczecieEgzekucji_FK
FOREIGN KEY ( WniosekOWszczecieEgzekucji_ID ) REFERENCES
sprawy.WniosekOWszczecieEgzekucji ( WniosekOWszczecieEgzekucji_ID ) ;

ALTER TABLE sprawy.WplataAkta ADD CONSTRAINT Wplaty_FK FOREIGN KEY (
Wplaty_Wplaty_ID ) REFERENCES sprawy.Wplaty ( Wplaty_ID ) ;

ALTER TABLE sprawy.ZajeciePojazdu ADD CONSTRAINT ZajecieCepik_FK FOREIGN KEY (
ZajecieCepik_ID_1 ) REFERENCES sprawy.ZajecieCepik ( ZajecieCepik_ID ) ;

ALTER TABLE sprawy.ZajeciewInnych ADD CONSTRAINT ZajecieInne_FK FOREIGN KEY (
ZajecieInne_ID ) REFERENCES sprawy.ZajecieInne ( ZajecieInne_ID ) ;

ALTER TABLE sprawy.ZajecieKW ADD CONSTRAINT ZajecieKW_Sad_FK FOREIGN KEY (
Sad_Sad_ID ) REFERENCES sprawy.Sad ( Sad_ID ) ;

ALTER TABLE sprawy.ZajeciewUS ADD CONSTRAINT ZajecieUS_FK FOREIGN KEY (
ZajecieUS_ID ) REFERENCES sprawy.ZajecieUS ( ZajecieUS_ID ) ;

ALTER TABLE sprawy.ZajeciewZUS ADD CONSTRAINT ZajecieZUS_FK FOREIGN KEY (
ZajecieZUS_ID ) REFERENCES sprawy.ZajecieZUS ( ZajecieZUS_ID ) ;

ALTER TABLE sprawy.Zajecie ADD CONSTRAINT Zajecie_AktaSprawy_FK FOREIGN KEY (
AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy ( AktaSprawy_ID ) ;

ALTER TABLE sprawy.ZbiegEgzekucji ADD CONSTRAINT ZbiegEgzekucji_AktaSprawy_FK
FOREIGN KEY ( AktaSprawy_AktaSprawy_ID ) REFERENCES sprawy.AktaSprawy (
AktaSprawy_ID ) ;

ALTER TABLE sprawy.ZbiegEgzekucji ADD CONSTRAINT ZbiegEgzekucji_Komornik_FK
FOREIGN KEY ( Komornik_Komornik_ID ) REFERENCES sprawy.Komornik ( Komornik_ID )
;

CREATE SEQUENCE sprawy.AktaSprawy_AktaSprawy_ID_SEQ START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.AktaSprawy_AktaSprawy_ID_TRG BEFORE
  INSERT
    ON sprawy.AktaSprawy FOR EACH ROW WHEN
    (
      NEW.AktaSprawy_ID IS NULL
    )
    BEGIN :NEW.AktaSprawy_ID := sprawy.AktaSprawy_AktaSprawy_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Doreczenia_Doreczenia_ID_SEQ START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.Doreczenia_Doreczenia_ID_TRG BEFORE
  INSERT
    ON sprawy.Doreczenia FOR EACH ROW WHEN
    (
      NEW.Doreczenia_ID IS NULL
    )
    BEGIN :NEW.Doreczenia_ID := sprawy.Doreczenia_Doreczenia_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Dowody_Dowody_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Dowody_Dowody_ID_TRG BEFORE
  INSERT
    ON sprawy.Dowody FOR EACH ROW WHEN
    (
      NEW.Dowody_ID IS NULL
    )
    BEGIN :NEW.Dowody_ID := sprawy.Dowody_Dowody_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Komornik_Komornik_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Komornik_Komornik_ID_TRG BEFORE
  INSERT
    ON sprawy.Komornik FOR EACH ROW WHEN
    (
      NEW.Komornik_ID IS NULL
    )
    BEGIN :NEW.Komornik_ID := sprawy.Komornik_Komornik_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Korespondencja_Korespondencja_ START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Korespondencja_Korespondencja_ BEFORE
  INSERT
    ON sprawy.Korespondencja FOR EACH ROW WHEN
    (
      NEW.Korespondencja_ID IS NULL
    )
    BEGIN :NEW.Korespondencja_ID :=
    sprawy.Korespondencja_Korespondencja_.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.NazwaZajecia_NazwaZajecia_ID START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.NazwaZajecia_NazwaZajecia_ID BEFORE
  INSERT
    ON sprawy.NazwaZajecia FOR EACH ROW WHEN
    (
      NEW.NazwaZajecia_ID IS NULL
    )
    BEGIN :NEW.NazwaZajecia_ID := sprawy.NazwaZajecia_NazwaZajecia_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Orzeczenie_Orzeczenie_ID_SEQ START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.Orzeczenie_Orzeczenie_ID_TRG BEFORE
  INSERT
    ON sprawy.Orzeczenie FOR EACH ROW WHEN
    (
      NEW.Orzeczenie_ID IS NULL
    )
    BEGIN :NEW.Orzeczenie_ID := sprawy.Orzeczenie_Orzeczenie_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Pelnomocnik_Pelnomocnik_ID_SEQ START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Pelnomocnik_Pelnomocnik_ID_TRG BEFORE
  INSERT
    ON sprawy.Pelnomocnik FOR EACH ROW WHEN
    (
      NEW.Pelnomocnik_ID IS NULL
    )
    BEGIN :NEW.Pelnomocnik_ID := sprawy.Pelnomocnik_Pelnomocnik_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.PlanPodzialu_PlanPodzialu_ID START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.PlanPodzialu_PlanPodzialu_ID BEFORE
  INSERT
    ON sprawy.PlanPodzialu FOR EACH ROW WHEN
    (
      NEW.PlanPodzialu_ID IS NULL
    )
    BEGIN :NEW.PlanPodzialu_ID := sprawy.PlanPodzialu_PlanPodzialu_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.RachunekBankowy_RachunekBankow START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.RachunekBankowy_RachunekBankow BEFORE
  INSERT
    ON sprawy.RachunekBankowy FOR EACH ROW WHEN
    (
      NEW.RachunekBankowy_ID IS NULL
    )
    BEGIN :NEW.RachunekBankowy_ID :=
    sprawy.RachunekBankowy_RachunekBankow.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Repozytorium_Repozytorium_ID START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.Repozytorium_Repozytorium_ID BEFORE
  INSERT
    ON sprawy.Repozytorium FOR EACH ROW WHEN
    (
      NEW.Repozytorium_ID IS NULL
    )
    BEGIN :NEW.Repozytorium_ID := sprawy.Repozytorium_Repozytorium_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Reprezentacja_Reprezentacja_ID START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Reprezentacja_Reprezentacja_ID BEFORE
  INSERT
    ON sprawy.Reprezentacja FOR EACH ROW WHEN
    (
      NEW.Reprezentacja_ID IS NULL
    )
    BEGIN :NEW.Reprezentacja_ID :=
    sprawy.Reprezentacja_Reprezentacja_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.RodzajOrzeczenia_RodzajOrzecze START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.RodzajOrzeczenia_RodzajOrzecze BEFORE
  INSERT
    ON sprawy.RodzajOrzeczenia FOR EACH ROW WHEN
    (
      NEW.RodzajOrzeczenia_ID IS NULL
    )
    BEGIN :NEW.RodzajOrzeczenia_ID :=
    sprawy.RodzajOrzeczenia_RodzajOrzecze.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.RodzajeZajecia_RodzajeZajecia_ START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.RodzajeZajecia_RodzajeZajecia_ BEFORE
  INSERT
    ON sprawy.RodzajeZajecia FOR EACH ROW WHEN
    (
      NEW.RodzajeZajecia_ID IS NULL
    )
    BEGIN :NEW.RodzajeZajecia_ID :=
    sprawy.RodzajeZajecia_RodzajeZajecia_.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Rozprawa_Rozprawa_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Rozprawa_Rozprawa_ID_TRG BEFORE
  INSERT
    ON sprawy.Rozprawa FOR EACH ROW WHEN
    (
      NEW.Rozprawa_ID IS NULL
    )
    BEGIN :NEW.Rozprawa_ID := sprawy.Rozprawa_Rozprawa_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Sad_Sad_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Sad_Sad_ID_TRG BEFORE
  INSERT
    ON sprawy.Sad FOR EACH ROW WHEN
    (
      NEW.Sad_ID IS NULL
    )
    BEGIN :NEW.Sad_ID := sprawy.Sad_Sad_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.SposobyEgzekucji_SposobyEgzeku START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.SposobyEgzekucji_SposobyEgzeku BEFORE
  INSERT
    ON sprawy.SposobyEgzekucji FOR EACH ROW WHEN
    (
      NEW.SposobyEgzekucji_ID IS NULL
    )
    BEGIN :NEW.SposobyEgzekucji_ID :=
    sprawy.SposobyEgzekucji_SposobyEgzeku.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Sprawa_Sprawa_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Sprawa_Sprawa_ID_TRG BEFORE
  INSERT
    ON sprawy.Sprawa FOR EACH ROW WHEN
    (
      NEW.Sprawa_ID IS NULL
    )
    BEGIN :NEW.Sprawa_ID := sprawy.Sprawa_Sprawa_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Statusstrony_Statusstrony_ID START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.Statusstrony_Statusstrony_ID BEFORE
  INSERT
    ON sprawy.Statusstrony FOR EACH ROW WHEN
    (
      NEW.Statusstrony_ID IS NULL
    )
    BEGIN :NEW.Statusstrony_ID := sprawy.Statusstrony_Statusstrony_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Strona_Strona_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Strona_Strona_ID_TRG BEFORE
  INSERT
    ON sprawy.Strona FOR EACH ROW WHEN
    (
      NEW.Strona_ID IS NULL
    )
    BEGIN :NEW.Strona_ID := sprawy.Strona_Strona_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.WniosekOWszczecieEgzekucji_Wni START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.WniosekOWszczecieEgzekucji_Wni BEFORE
  INSERT
    ON sprawy.WniosekOWszczecieEgzekucji FOR EACH ROW WHEN
    (
      NEW.WniosekOWszczecieEgzekucji_ID IS NULL
    )
    BEGIN :NEW.WniosekOWszczecieEgzekucji_ID :=
    sprawy.WniosekOWszczecieEgzekucji_Wni.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.WplataAkta_WplataAkta_ID_SEQ START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.WplataAkta_WplataAkta_ID_TRG BEFORE
  INSERT
    ON sprawy.WplataAkta FOR EACH ROW WHEN
    (
      NEW.WplataAkta_ID IS NULL
    )
    BEGIN :NEW.WplataAkta_ID := sprawy.WplataAkta_WplataAkta_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Wplaty_Wplaty_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Wplaty_Wplaty_ID_TRG BEFORE
  INSERT
    ON sprawy.Wplaty FOR EACH ROW WHEN
    (
      NEW.Wplaty_ID IS NULL
    )
    BEGIN :NEW.Wplaty_ID := sprawy.Wplaty_Wplaty_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.Zajecie_Zajecia_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.Zajecie_Zajecia_ID_TRG BEFORE
  INSERT
    ON sprawy.Zajecie FOR EACH ROW WHEN
    (
      NEW.Zajecia_ID IS NULL
    )
    BEGIN :NEW.Zajecia_ID := sprawy.Zajecie_Zajecia_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZajecieCepik_ZajecieCepik_ID START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.ZajecieCepik_ZajecieCepik_ID BEFORE
  INSERT
    ON sprawy.ZajecieCepik FOR EACH ROW WHEN
    (
      NEW.ZajecieCepik_ID IS NULL
    )
    BEGIN :NEW.ZajecieCepik_ID := sprawy.ZajecieCepik_ZajecieCepik_ID.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZajecieInne_ZajecieInne_ID_SEQ START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.ZajecieInne_ZajecieInne_ID_TRG BEFORE
  INSERT
    ON sprawy.ZajecieInne FOR EACH ROW WHEN
    (
      NEW.ZajecieInne_ID IS NULL
    )
    BEGIN :NEW.ZajecieInne_ID := sprawy.ZajecieInne_ZajecieInne_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZajecieKW_ZajecieKW_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.ZajecieKW_ZajecieKW_ID_TRG BEFORE
  INSERT
    ON sprawy.ZajecieKW FOR EACH ROW WHEN
    (
      NEW.ZajecieKW_ID IS NULL
    )
    BEGIN :NEW.ZajecieKW_ID := sprawy.ZajecieKW_ZajecieKW_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZajecieUS_ZajecieUS_ID_SEQ START WITH 1 NOCACHE ORDER ;
CREATE OR REPLACE TRIGGER sprawy.ZajecieUS_ZajecieUS_ID_TRG BEFORE
  INSERT
    ON sprawy.ZajecieUS FOR EACH ROW WHEN
    (
      NEW.ZajecieUS_ID IS NULL
    )
    BEGIN :NEW.ZajecieUS_ID := sprawy.ZajecieUS_ZajecieUS_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZajecieZUS_ZajecieZUS_ID_SEQ START WITH 1 NOCACHE ORDER
  ;
CREATE OR REPLACE TRIGGER sprawy.ZajecieZUS_ZajecieZUS_ID_TRG BEFORE
  INSERT
    ON sprawy.ZajecieZUS FOR EACH ROW WHEN
    (
      NEW.ZajecieZUS_ID IS NULL
    )
    BEGIN :NEW.ZajecieZUS_ID := sprawy.ZajecieZUS_ZajecieZUS_ID_SEQ.NEXTVAL;
END;
/

CREATE SEQUENCE sprawy.ZbiegEgzekucji_ZbiegEgzekucji_ START WITH 1 NOCACHE
  ORDER ;
CREATE OR REPLACE TRIGGER sprawy.ZbiegEgzekucji_ZbiegEgzekucji_ BEFORE
  INSERT
    ON sprawy.ZbiegEgzekucji FOR EACH ROW WHEN
    (
      NEW.ZbiegEgzekucji_ID IS NULL
    )
    BEGIN :NEW.ZbiegEgzekucji_ID :=
    sprawy.ZbiegEgzekucji_ZbiegEgzekucji_.NEXTVAL;
END;
/


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            39
-- CREATE INDEX                             8
-- ALTER TABLE                             73
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          30
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         30
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
